import UIKit

/**
 - Task: 
 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

  1: 1
  3: 1,3
  6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */

func findFirstTriangleNumberFor(divisorCount: Int) -> Int {
    for i in divisorCount...Int.max {
        var count = 0
        let triangleNumber = (i * (i + 1)) / 2
        if !triangleNumber.isPrime {
            for j in 1...Int(sqrt(Double(triangleNumber))) {
                if triangleNumber % j ==  0 {
                    count += 1
                    if j != triangleNumber / j {
                        count += 1
                    }
                }
                if count >= divisorCount {
                    return triangleNumber
                }
            }
        } else {
            continue
        }
    }

    return 0
}

extension Int {
    var isPrime: Bool {
        guard self >= 2 else { return false }
        guard self != 2 else { return true }
        guard self % 2 != 0 else { return false }
        return !stride(from: 3, through: Int(sqrt(Double(self))), by: 2).contains { self % $0 == 0 }
    }
}

findFirstTriangleNumberFor(divisorCount: 500)
